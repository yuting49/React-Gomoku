{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Chess","this","props","value","react_default","a","createElement","className","React","Component","Square","onClick","App_Chess","Gomoku","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","squares","Array","fill","stepNumber","blackIsNext","winner","times","record","handleStart","bind","assertThisInitialized","showRecord","type","_this2","map","index","App_Square","key","handleClick","i","current","slice","setState","checkWinner","winlines","push","length","_winlines$_i","slicedToArray","b","c","d","e","console","log","total","blackwin","whitewin","alert","status","now","renderSquare","renderBoard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.96193b82.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass Chess extends React.Component {   \n  render(){\n    if (this.props.value === 'B') {\n      return <div className=\"chess black\"></div>\n    } else if (this.props.value === 'W') {\n      return <div className=\"chess white\"></div>\n    } else {\n      return  <div></div>\n    }\n  }\n}\n\nclass Square extends React.Component {\n  render() {\n    return (\n      <div className=\"square_bg\">\n        <button className=\"square block\"  onClick={this.props.onClick}>\n          <Chess value={this.props.value}/>\n        </button>\n      </div>\n    );\n  }\n}\n\nclass Gomoku extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(19*19).fill(null),\n      stepNumber: 0,\n      blackIsNext: false,\n      winner: false,\n      times: 0,\n      record:[]\n    };\n    /* state 狀態變化\n    squares：盤面狀態 handleClick(i) 後改變，handleStart() 還原\n    stepNumber：handleClick(i) 後加一，handleStart() 還原\n    blackIsNext: handleClick(i) 後改變，handleStart() 還原\n    winner: handleClick後改為 checkwinner()，handleStart 還原\n    times: handleStart() 後加一\n    record: checkwinner() 輸贏出現後寫入，或 handleStart()後寫入\n    */\n    this.handleStart = this.handleStart.bind(this);\n    this.showRecord = this.showRecord.bind(this);\n  }\n\n  renderSquare(type){\n    const box = this.state.squares.map(\n      (squares, index) =>\n      <Square type={type} key={index} value={this.state.squares[index]}   \n              onClick={()=>this.handleClick(index)}  \n      />\n    );\n    return box\n  }\n  renderBoard(){\n    const block = Array(18*18).fill(null).map(\n      (squares, index) =>\n      <div className=\"board_bg\" key={index}>\n        <div className=\"board block\"></div> \n      </div>\n    \n    );\n    return block\n  }\n\n  handleClick(i){\n    const current = this.state.squares.slice();//copy現在state的狀態\n    const stepNumber = this.state.stepNumber + 1\n    if (current[i] || this.state.winner) {//避免重複落子、勝後落子\n      return\n    }\n    current[i] = this.state.blackIsNext ? 'W' : 'B';\n    this.setState({\n      squares: current,\n      stepNumber: stepNumber,\n      blackIsNext: !this.state.blackIsNext,\n      winner: this.checkWinner(current)\n    })\n  }\n\n  checkWinner(current){\n    const winlines = [] //計算勝利組合\n    for (let i = 0; i < 19*19; i++) {\n      winlines.push([i, i+1, i+2, i+3, i+4])    //橫的\n      winlines.push([i, i+19, i+38, i+57, i+76])//直的\n      winlines.push([i, i+20, i+40, i+60, i+80])//斜率 1 or -1\n      winlines.push([i, i+18, i+36, i+54, i+72])\n    } \n    for (let i = 0; i < winlines.length; i++) {\n      const [a, b, c, d, e] = winlines[i]; //核對盤面是否吻合\n      if (current[a] && current[a]  === current[b] && current[a]  === current[c] &&\n        current[a]  === current[d] && current[a]  === current[e]){\n          const record = this.state.record\n          console.log('original',record)\n          record[this.state.times] = current[a]\n          console.log('after change',record)\n          this.setState({\n            record: record\n          })\n          return (current[a] === 'B' ? 'BLACK': 'WHITE')\n      }\n    }return null\n  }\n\n  handleStart(){\n    const times = this.state.times + 1\n    if (!this.state.winner) {\n      const record = this.state.record\n      record[this.state.times] = '平'\n      this.setState({\n        record: record,\n      })\n    }\n    this.setState({\n      squares: Array(19*19).fill(null),\n      stepNumber: 0,\n      blackIsNext: false,\n      winner: false,\n      times: times\n    })\n  }\n\n  showRecord(){\n    const total = this.state.record.length\n    let blackwin = 0\n    let whitewin = 0\n    for (let i = 0; i < total; i++){\n      if (this.state.record[i] === 'B') {\n        blackwin += 1\n      } else if (this.state.record[i] === 'W') {\n        whitewin += 1\n      }\n    }\n    alert(\n      'BLACK wins '+ blackwin + ' times !\\nWHITE wins '+ whitewin + ' times !'\n      )\n  }\n\n  render() {\n    let status\n    let now = this.state.blackIsNext?  'WHITE' : 'BLACK'\n    if (this.state.winner) {\n      status = 'Winner is '+ this.state.winner + ' !'\n    } else {\n      status = 'Now, player is ' + now\n    }\n    \n    return (\n        <div className=\"game\">\n          <h1>Gomoku</h1>\n          <header>\n            <button onClick={this.showRecord} className=\"btn btn-outline-dark \">\n              Record\n            </button>\n            <div className=\"status\">{status}</div>   \n            <button onClick={this.handleStart} className=\"btn btn-outline-dark \">\n              Restart\n            </button> \n          </header>  \n          <div className=\"container\">\n            {this.renderSquare()}\n            {this.renderBoard()}\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default Gomoku;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport Gomoku from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Gomoku />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}